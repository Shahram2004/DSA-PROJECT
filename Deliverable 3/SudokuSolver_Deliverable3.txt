#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <list>
#include <chrono>
#include <fstream>

using namespace std;
using namespace std::chrono;

// Function declarations
void displayGrid(const vector<vector<int>> &grid);
bool validateGrid(const vector<vector<int>> &grid);
bool solveSudoku(vector<vector<int>> &grid, unordered_map<int, unordered_set<int>> &rowConstraints,
                 unordered_map<int, unordered_set<int>> &colConstraints,
                 unordered_map<int, unordered_set<int>> &boxConstraints, bool &unsolvable);
void manualInput(vector<vector<int>> &grid);
void performanceReport(const vector<vector<int>> &grid);
void testEdgeCases();

// Display the Sudoku grid
void displayGrid(const vector<vector<int>> &grid) {
    cout << "\n  ";
    for (int j = 0; j < 9; ++j) cout << j << " ";
    cout << "\n  -------------------------\n";
    for (int i = 0; i < 9; ++i) {
        cout << i << "| ";
        for (int j = 0; j < 9; ++j) {
            if (grid[i][j] == 0) cout << ". ";
            else cout << grid[i][j] << " ";
            if ((j + 1) % 3 == 0 && j < 8) cout << "| ";
        }
        cout << "|\n";
        if ((i + 1) % 3 == 0 && i < 8) cout << "  -------------------------\n";
    }
    cout << "  -------------------------\n";
}

// Validate the Sudoku grid
bool validateGrid(const vector<vector<int>> &grid) {
    for (int i = 0; i < 9; ++i) {
        vector<bool> usedRow(10, false), usedCol(10, false);
        for (int j = 0; j < 9; ++j) {
            if (grid[i][j] != 0) {
                if (usedRow[grid[i][j]]) return false;
                usedRow[grid[i][j]] = true;
            }
            if (grid[j][i] != 0) {
                if (usedCol[grid[j][i]]) return false;
                usedCol[grid[j][i]] = true;
            }
        }
    }
    for (int box = 0; box < 9; ++box) {
        vector<bool> used(10, false);
        int rowStart = (box / 3) * 3;
        int colStart = (box % 3) * 3;
        for (int i = rowStart; i < rowStart + 3; ++i) {
            for (int j = colStart; j < colStart + 3; ++j) {
                if (grid[i][j] != 0) {
                    if (used[grid[i][j]]) return false;
                    used[grid[i][j]] = true;
                }
            }
        }
    }
    return true;
}

// Check if a number is safe to place
bool isSafe(const vector<vector<int>> &grid, const unordered_map<int, unordered_set<int>> &rowConstraints,
            const unordered_map<int, unordered_set<int>> &colConstraints,
            const unordered_map<int, unordered_set<int>> &boxConstraints, int row, int col, int num) {
    int boxIndex = (row / 3) * 3 + col / 3;
    return rowConstraints.at(row).count(num) == 0 &&
           colConstraints.at(col).count(num) == 0 &&
           boxConstraints.at(boxIndex).count(num) == 0;
}

// Solve the Sudoku puzzle with MRV heuristic
bool solveSudoku(vector<vector<int>> &grid, unordered_map<int, unordered_set<int>> &rowConstraints,
                 unordered_map<int, unordered_set<int>> &colConstraints,
                 unordered_map<int, unordered_set<int>> &boxConstraints, bool &unsolvable) {
    list<pair<int, int>> emptyCells;
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] == 0) emptyCells.push_back({row, col});
        }
    }
    emptyCells.sort([&](const pair<int, int> &a, const pair<int, int> &b) {
        int countA = 0, countB = 0;
        for (int num = 1; num <= 9; ++num) {
            if (isSafe(grid, rowConstraints, colConstraints, boxConstraints, a.first, a.second, num)) countA++;
            if (isSafe(grid, rowConstraints, colConstraints, boxConstraints, b.first, b.second, num)) countB++;
        }
        return countA < countB;
    });
    for (const auto &cell : emptyCells) {
        int row = cell.first, col = cell.second;
        if (grid[row][col] == 0) {
            for (int num = 1; num <= 9; ++num) {
                if (isSafe(grid, rowConstraints, colConstraints, boxConstraints, row, col, num)) {
                    grid[row][col] = num;
                    rowConstraints[row].insert(num);
                    colConstraints[col].insert(num);
                    boxConstraints[(row / 3) * 3 + col / 3].insert(num);
                    if (solveSudoku(grid, rowConstraints, colConstraints, boxConstraints, unsolvable)) return true;
                    grid[row][col] = 0;
                    rowConstraints[row].erase(num);
                    colConstraints[col].erase(num);
                    boxConstraints[(row / 3) * 3 + col / 3].erase(num);
                }
            }
            unsolvable = true;
            return false;
        }
    }
    return true;
}

// Manual input for the Sudoku grid
void manualInput(vector<vector<int>> &grid) {
    cout << "\nEnter row, column (0-8) and value (1-9), or -1 -1 -1 to finish:\n";
    int row, col, value;
    while (true) {
        displayGrid(grid);
        cout << "Enter position and value: ";
        if (!(cin >> row >> col >> value)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input. Please enter three numbers.\n";
            continue;
        }
        if (row == -1 && col == -1 && value == -1) break;
        if (row < 0 || row >= 9 || col < 0 || col >= 9 || value < 1 || value > 9) {
            cout << "Invalid input. Row and column must be 0-8, value 1-9.\n";
            continue;
        }
        grid[row][col] = value;
    }
}

// Performance report
void performanceReport(const vector<vector<int>> &grid) {
    unordered_map<int, unordered_set<int>> rowConstraints, colConstraints, boxConstraints;
    for (int i = 0; i < 9; ++i) {
        rowConstraints[i] = unordered_set<int>();
        colConstraints[i] = unordered_set<int>();
        boxConstraints[i] = unordered_set<int>();
    }
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] != 0) {
                rowConstraints[row].insert(grid[row][col]);
                colConstraints[col].insert(grid[row][col]);
                boxConstraints[(row / 3) * 3 + col / 3].insert(grid[row][col]);
            }
        }
    }
    vector<vector<int>> gridCopy = grid;
    auto start = high_resolution_clock::now();
    bool unsolvable = false;
    bool solved = solveSudoku(gridCopy, rowConstraints, colConstraints, boxConstraints, unsolvable);
    auto end = high_resolution_clock::now();
    duration<double> duration = end - start;
    cout << "Performance Report:\n";
    cout << "Execution Time: " << duration.count() << " seconds\n";
    cout << "Time Complexity: O(9^n), n = empty cells\n";
    cout << "Space Complexity: O(n), n = empty cells\n";
    cout << "Status: " << (solved ? "Solved" : "Unsolvable") << "\n";
    ofstream reportFile("performance_report.txt", ios::app);
    if (reportFile.is_open()) {
        reportFile << "Time: " << duration.count() << "s, Solved: " << (solved ? "Yes" : "No") << "\n";
        reportFile.close();
    }
}

// Test edge cases
void testEdgeCases() {
    cout << "\nTesting Edge Cases:\n";
    vector<vector<int>> emptyGrid(9, vector<int>(9, 0));
    vector<vector<int>> invalidGrid = {
        {5,3,0,0,7,0,0,0,0},
        {6,0,0,1,9,5,0,0,0},
        {0,9,8,0,0,0,0,6,0},
        {8,0,0,0,6,0,0,0,3},
        {4,0,0,8,0,3,0,0,1},
        {7,0,0,0,2,0,0,0,6},
        {0,6,0,0,0,0,2,8,0},
        {0,0,0,4,1,9,0,0,5},
        {5,0,0,0,8,0,0,7,9} // Duplicate 5 in row 9
    };
    unordered_map<int, unordered_set<int>> rowConstraints, colConstraints, boxConstraints;
    for (int i = 0; i < 9; ++i) {
        rowConstraints[i] = unordered_set<int>();
        colConstraints[i] = unordered_set<int>();
        boxConstraints[i] = unordered_set<int>();
    }

    // Test 1: Empty grid
    cout << "Test 1: Empty Grid\n";
    bool unsolvable = false;
    if (solveSudoku(emptyGrid, rowConstraints, colConstraints, boxConstraints, unsolvable)) {
        cout << "Empty grid solved.\n";
        displayGrid(emptyGrid);
    } else {
        cout << "Empty grid unsolvable.\n";
    }
    performanceReport(emptyGrid);

    // Test 2: Invalid grid
    cout << "\nTest 2: Invalid Grid (Duplicate numbers)\n";
    if (!validateGrid(invalidGrid)) {
        cout << "Invalid grid detected.\n";
    } else {
        cout << "Invalid grid not detected.\n";
    }
}

int main() {
    vector<vector<int>> grid(9, vector<int>(9, 0));
    unordered_map<int, unordered_set<int>> rowConstraints, colConstraints, boxConstraints;
    for (int i = 0; i < 9; ++i) {
        rowConstraints[i] = unordered_set<int>();
        colConstraints[i] = unordered_set<int>();
        boxConstraints[i] = unordered_set<int>();
    }

    cout << "Sudoku Solver - Deliverable 3\n";
    manualInput(grid);
    if (validateGrid(grid)) {
        for (int row = 0; row < 9; ++row) {
            for (int col = 0; col < 9; ++col) {
                if (grid[row][col] != 0) {
                    rowConstraints[row].insert(grid[row][col]);
                    colConstraints[col].insert(grid[row][col]);
                    boxConstraints[(row / 3) * 3 + col / 3].insert(grid[row][col]);
                }
            }
        }
        bool unsolvable = false;
        if (solveSudoku(grid, rowConstraints, colConstraints, boxConstraints, unsolvable)) {
            cout << "Solved Puzzle:\n";
            displayGrid(grid);
            performanceReport(grid);
        } else {
            cout << "No solution exists.\n";
        }
    } else {
        cout << "Invalid puzzle.\n";
    }
    testEdgeCases();
    return 0;
}