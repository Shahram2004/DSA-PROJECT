#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <list>
#include <fstream>
#include <algorithm>
#include <chrono>
#include <thread>
#include <random>
#include <limits>
#include <iomanip>
#include <sstream>

using namespace std;
using namespace std::chrono;

// Struct to store puzzle records
struct PuzzleRecord {
    vector<vector<int>> grid;
    string timestamp;
    bool solved;
};

// Global puzzle database
vector<PuzzleRecord> puzzleDatabase;

// Function declarations
void displayWelcomeMessage();
void displayGrid(const vector<vector<int>> &grid);
void inputPuzzle(vector<vector<int>> &grid);
void manualInput(vector<vector<int>> &grid, int difficulty);
bool validateGrid(const vector<vector<int>> &grid);
bool solveSudoku(vector<vector<int>> &grid, unordered_map<int, unordered_set<int>> &rowConstraints,
                 unordered_map<int, unordered_set<int>> &colConstraints,
                 unordered_map<int, unordered_set<int>> &boxConstraints, bool &unsolvable);
void optimizeSolver(vector<vector<int>> &grid);
void performanceReport(const vector<vector<int>> &grid);
void managePuzzles();
void errorHandling(const vector<vector<int>> &grid);
void submitPuzzle(vector<vector<int>> &grid);
bool isPuzzleComplete(const vector<vector<int>> &grid);
void clearInputStream();
void saveDatabase();
void loadDatabase();
void displayDatabase();
void searchPuzzleByTimestamp(const string &timestamp);
void sortDatabaseByTimestamp();
string currentDateTime();
void displayGuide();
void displayLoadingAnimation();

// Clear input stream
void clearInputStream() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

// Get current timestamp
string currentDateTime() {
    auto now = system_clock::now();
    auto in_time_t = system_clock::to_time_t(now);
    stringstream ss;
    ss << put_time(localtime(&in_time_t), "%Y-%m-%d %H:%M:%S");
    return ss.str();
}

// Display welcome message
void displayWelcomeMessage() {
    cout << "\n========================================\n";
    cout << "  Welcome to the Ultimate Sudoku Solver! \n";
    cout << "========================================\n";
    cout << "This is an enhanced Sudoku solver with additional features.\n";
}

// Display user guide
void displayGuide() {
    cout << "\n====================\n";
    cout << "  User Guide \n";
    cout << "====================\n";
    cout << "1. Input Puzzle: Enter a new Sudoku puzzle.\n";
    cout << "2. Display Puzzle: View the current puzzle.\n";
    cout << "3. Solve Puzzle: Solve the current puzzle.\n";
    cout << "4. Performance Report: View solver performance.\n";
    cout << "5. Manage Puzzles: Save, load, or edit puzzles.\n";
    cout << "6. Display Guide: View this guide.\n";
    cout << "7. Exit: Exit the program.\n";
}

// Display the Sudoku grid
void displayGrid(const vector<vector<int>> &grid) {
    cout << "\n  ";
    for (int j = 0; j < 9; ++j) cout << j << " ";
    cout << "\n  -------------------------\n";
    for (int i = 0; i < 9; ++i) {
        cout << i << "| ";
        for (int j = 0; j < 9; ++j) {
            if (grid[i][j] == 0) cout << ". ";
            else cout << grid[i][j] << " ";
            if ((j + 1) % 3 == 0 && j < 8) cout << "| ";
        }
        cout << "|\n";
        if ((i + 1) % 3 == 0 && i < 8) cout << "  -------------------------\n";
    }
    cout << "  -------------------------\n";
}

// Input puzzle (manual or file)
void inputPuzzle(vector<vector<int>> &grid) {
    int choice;
    cout << "\nChoose input method:\n";
    cout << "1. Manual input\n";
    cout << "2. Load from file\n";
    cout << "Enter your choice (1-2): ";
    while (!(cin >> choice) || choice < 1 || choice > 2) {
        clearInputStream();
        cout << "Invalid input. Please enter 1 or 2: ";
    }
    if (choice == 1) {
        int difficulty;
        cout << "\nChoose difficulty level:\n";
        cout << "1. Easy\n";
        cout << "2. Medium\n";
        cout << "3. Hard\n";
        cout << "Enter your choice (1-3): ";
        while (!(cin >> difficulty) || difficulty < 1 || difficulty > 3) {
            clearInputStream();
            cout << "Invalid input. Please enter 1, 2, or 3: ";
        }
        manualInput(grid, difficulty);
    } else {
        string filename;
        cout << "Enter filename: ";
        cin.ignore();
        getline(cin, filename);
        try {
            ifstream file(filename);
            if (!file) throw runtime_error("Cannot open file: " + filename);
            for (int i = 0; i < 9; ++i) {
                for (int j = 0; j < 9; ++j) {
                    string value;
                    file >> value;
                    int number = stoi(value);
                    if (number < 0 || number > 9) throw runtime_error("Invalid puzzle data");
                    grid[i][j] = number;
                }
            }
            file.close();
            cout << "Puzzle loaded successfully!\n";
            displayGrid(grid);
        } catch (const exception &e) {
            cout << "Error: " << e.what() << endl;
            fill(grid.begin(), grid.end(), vector<int>(9, 0));
        }
    }
}

// Manual puzzle input
void manualInput(vector<vector<int>> &grid, int difficulty) {
    int numHints = (difficulty == 1) ? 35 : (difficulty == 2) ? 30 : 25;
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(0, 80);
    int numFilled = min(dis(gen), numHints);
    vector<pair<int, int>> positions;
    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) positions.push_back({i, j});
    }
    shuffle(positions.begin(), positions.end(), gen);
    for (int i = 0; i < numFilled; ++i) {
        auto [row, col] = positions[i];
        grid[row][col] = (rd() % 9) + 1;
    }
    cout << "\nEnter row, column (0-8) and value (1-9), or -1 -1 -1 to finish:\n";
    int row, col, value;
    while (true) {
        displayGrid(grid);
        cout << "Enter position and value: ";
        if (!(cin >> row >> col >> value)) {
            clearInputStream();
            cout << "Invalid input. Please enter three numbers.\n";
            continue;
        }
        if (row == -1 && col == -1 && value == -1) break;
        if (row < 0 || row >= 9 || col < 0 || col >= 9 || value < 0 || value > 9) {
            cout << "Invalid input. Row and column must be 0-8, value 0-9.\n";
            continue;
        }
        if (grid[row][col] != 0) {
            cout << "Cell already contains " << grid[row][col] << ". Overwrite? (y/n): ";
            char confirm;
            cin >> confirm;
            if (tolower(confirm) != 'y') continue;
        }
        grid[row][col] = value;
    }
    cout << "Submit puzzle? (1 to continue, 2 to submit): ";
    int choice;
    cin >> choice;
    if (choice == 2) submitPuzzle(grid);
}

// Validate the Sudoku grid
bool validateGrid(const vector<vector<int>> &grid) {
    for (int i = 0; i < 9; ++i) {
        vector<bool> usedRow(10, false), usedCol(10, false);
        for (int j = 0; j < 9; ++j) {
            if (grid[i][j] != 0) {
                if (usedRow[grid[i][j]]) return false;
                usedRow[grid[i][j]] = true;
            }
            if (grid[j][i] != 0) {
                if (usedCol[grid[j][i]]) return false;
                usedCol[grid[j][i]] = true;
            }
        }
    }
    for (int box = 0; box < 9; ++box) {
        vector<bool> used(10, false);
        int rowStart = (box / 3) * 3;
        int colStart = (box % 3) * 3;
        for (int i = rowStart; i < rowStart + 3; ++i) {
            for (int j = colStart; j < colStart + 3; ++j) {
                if (grid[i][j] != 0) {
                    if (used[grid[i][j]]) return false;
                    used[grid[i][j]] = true;
                }
            }
        }
    }
    return true;
}

// Check if a number is safe to place
bool isSafe(const vector<vector<int>> &grid, const unordered_map<int, unordered_set<int>> &rowConstraints,
            const unordered_map<int, unordered_set<int>> &colConstraints,
            const unordered_map<int, unordered_set<int>> &boxConstraints, int row, int col, int num) {
    int boxIndex = (row / 3) * 3 + col / 3;
    return rowConstraints.at(row).count(num) == 0 &&
           colConstraints.at(col).count(num) == 0 &&
           boxConstraints.at(boxIndex).count(num) == 0;
}

// Solve the Sudoku puzzle with MRV heuristic
bool solveSudoku(vector<vector<int>> &grid, unordered_map<int, unordered_set<int>> &rowConstraints,
                 unordered_map<int, unordered_set<int>> &colConstraints,
                 unordered_map<int, unordered_set<int>> &boxConstraints, bool &unsolvable) {
    list<pair<int, int>> emptyCells;
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] == 0) emptyCells.push_back({row, col});
        }
    }
    emptyCells.sort([&](const pair<int, int> &a, const pair<int, int> &b) {
        int countA = 0, countB = 0;
        for (int num = 1; num <= 9; ++num) {
            if (isSafe(grid, rowConstraints, colConstraints, boxConstraints, a.first, a.second, num)) countA++;
            if (isSafe(grid, rowConstraints, colConstraints, boxConstraints, b.first, b.second, num)) countB++;
        }
        return countA < countB;
    });
    for (const auto &cell : emptyCells) {
        int row = cell.first, col = cell.second;
        if (grid[row][col] == 0) {
            for (int num = 1; num <= 9; ++num) {
                if (isSafe(grid, rowConstraints, colConstraints, boxConstraints, row, col, num)) {
                    grid[row][col] = num;
                    rowConstraints[row].insert(num);
                    colConstraints[col].insert(num);
                    boxConstraints[(row / 3) * 3 + col / 3].insert(num);
                    if (solveSudoku(grid, rowConstraints, colConstraints, boxConstraints, unsolvable)) return true;
                    grid[row][col] = 0;
                    rowConstraints[row].erase(num);
                    colConstraints[col].erase(num);
                    boxConstraints[(row / 3) * 3 + col / 3].erase(num);
                }
            }
            unsolvable = true;
            return false;
        }
    }
    return true;
}

// Optimize solver with constraints
void optimizeSolver(vector<vector<int>> &grid) {
    unordered_map<int, unordered_set<int>> rowConstraints, colConstraints, boxConstraints;
    for (int i = 0; i < 9; ++i) {
        rowConstraints[i] = unordered_set<int>();
        colConstraints[i] = unordered_set<int>();
        boxConstraints[i] = unordered_set<int>();
    }
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] != 0) {
                rowConstraints[row].insert(grid[row][col]);
                colConstraints[col].insert(grid[row][col]);
                boxConstraints[(row / 3) * 3 + col / 3].insert(grid[row][col]);
            }
        }
    }
    bool unsolvable = false;
    solveSudoku(grid, rowConstraints, colConstraints, boxConstraints, unsolvable);
    if (unsolvable) cout << "The puzzle is unsolvable.\n";
}

// Generate performance report
void performanceReport(const vector<vector<int>> &grid) {
    unordered_map<int, unordered_set<int>> rowConstraints, colConstraints, boxConstraints;
    for (int i = 0; i < 9; ++i) {
        rowConstraints[i] = unordered_set<int>();
        colConstraints[i] = unordered_set<int>();
        boxConstraints[i] = unordered_set<int>();
    }
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] != 0) {
                rowConstraints[row].insert(grid[row][col]);
                colConstraints[col].insert(grid[row][col]);
                boxConstraints[(row / 3) * 3 + col / 3].insert(grid[row][col]);
            }
        }
    }
    vector<vector<int>> gridCopy = grid;
    auto start = high_resolution_clock::now();
    bool unsolvable = false;
    bool solved = solveSudoku(gridCopy, rowConstraints, colConstraints, boxConstraints, unsolvable);
    auto end = high_resolution_clock::now();
    duration<double> duration = end - start;
    cout << "Performance Report:\n";
    cout << "Execution Time: " << duration.count() << " seconds\n";
    cout << "Time Complexity: O(9^n), n = empty cells\n";
    cout << "Space Complexity: O(n), n = empty cells\n";
    cout << "Status: " << (solved ? "Solved" : "Unsolvable") << "\n";
}

// Handle errors in puzzle
void errorHandling(const vector<vector<int>> &grid) {
    unordered_map<int, unordered_set<int>> rowConstraints, colConstraints, boxConstraints;
    for (int i = 0; i < 9; ++i) {
        rowConstraints[i] = unordered_set<int>();
        colConstraints[i] = unordered_set<int>();
        boxConstraints[i] = unordered_set<int>();
    }
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] != 0) {
                rowConstraints[row].insert(grid[row][col]);
                colConstraints[col].insert(grid[row][col]);
                boxConstraints[(row / 3) * 3 + col / 3].insert(grid[row][col]);
            }
        }
    }
    vector<vector<int>> gridCopy = grid;
    bool unsolvable = false;
    bool solved = solveSudoku(gridCopy, rowConstraints, colConstraints, boxConstraints, unsolvable);
    if (unsolvable || !solved) cout << "Error: The puzzle is unsolvable.\n";
}

// Check if puzzle is complete
bool isPuzzleComplete(const vector<vector<int>> &grid) {
    for (const auto &row : grid) {
        for (int val : row) {
            if (val == 0) return false;
        }
    }
    return true;
}

// Submit and validate puzzle
void submitPuzzle(vector<vector<int>> &grid) {
    if (isPuzzleComplete(grid)) {
        cout << "Puzzle complete. Validating...\n";
        if (validateGrid(grid)) {
            cout << "Puzzle is valid.\n";
            performanceReport(grid);
        } else {
            cout << "Invalid puzzle.\n";
        }
    } else {
        cout << "Puzzle incomplete. Solving...\n";
        optimizeSolver(grid);
        displayGrid(grid);
    }
}

// Save puzzle database
void saveDatabase() {
    ofstream databaseFile("puzzle_database.txt");
    if (databaseFile.is_open()) {
        for (const auto &record : puzzleDatabase) {
            databaseFile << record.timestamp << "\n";
            for (const auto &row : record.grid) {
                for (const auto &cell : row) databaseFile << cell << " ";
                databaseFile << "\n";
            }
            databaseFile << (record.solved ? "Solved" : "Unsolved") << "\n";
        }
        databaseFile.close();
    } else {
        cout << "Error opening database file.\n";
    }
}

// Load puzzle database
void loadDatabase() {
    puzzleDatabase.clear();
    ifstream databaseFile("puzzle_database.txt");
    if (databaseFile.is_open()) {
        string line;
        while (getline(databaseFile, line)) {
            PuzzleRecord record;
            record.timestamp = line;
            record.grid = vector<vector<int>>(9, vector<int>(9, 0));
            for (int i = 0; i < 9; ++i) {
                getline(databaseFile, line);
                stringstream ss(line);
                for (int j = 0; j < 9; ++j) {
                    int value;
                    ss >> value;
                    record.grid[i][j] = value;
                }
            }
            getline(databaseFile, line);
            record.solved = (line == "Solved");
            puzzleDatabase.push_back(record);
        }
        databaseFile.close();
    } else {
        cout << "Error opening database file.\n";
    }
}

// Display puzzle database
void displayDatabase() {
    cout << "Puzzle Database:\n";
    for (const auto &record : puzzleDatabase) {
        cout << "Timestamp: " << record.timestamp << "\n";
        cout << "Status: " << (record.solved ? "Solved" : "Unsolved") << "\n";
        displayGrid(record.grid);
        cout << "------------------------\n";
    }
}

// Search puzzle by timestamp
void searchPuzzleByTimestamp(const string &timestamp) {
    for (const auto &record : puzzleDatabase) {
        if (record.timestamp == timestamp) {
            cout << "Puzzle found:\n";
            cout << "Timestamp: " << record.timestamp << "\n";
            cout << "Status: " << (record.solved ? "Solved" : "Unsolved") << "\n";
            displayGrid(record.grid);
            return;
        }
    }
    cout << "No puzzle found with timestamp: " << timestamp << "\n";
}

// Sort database by timestamp
void sortDatabaseByTimestamp() {
    sort(puzzleDatabase.begin(), puzzleDatabase.end(),
         [](const PuzzleRecord &a, const PuzzleRecord &b) { return a.timestamp < b.timestamp; });
    cout << "Database sorted by timestamp.\n";
}

// Manage saved puzzles
void managePuzzles() {
    loadDatabase();
    int choice;
    do {
        cout << "Puzzle Management Menu:\n";
        cout << "1. Load Puzzle\n";
        cout << "2. Display Database\n";
        cout << "3. Delete Puzzle\n";
        cout << "4. Update Puzzle\n";
        cout << "5. Search Puzzle by Timestamp\n";
        cout << "6. Sort Database by Timestamp\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        while (!(cin >> choice)) {
            clearInputStream();
            cout << "Invalid input. Please enter a number: ";
        }
        switch (choice) {
            case 1: {
                string filename;
                cout << "Enter filename: ";
                cin >> filename;
                ifstream file(filename);
                if (!file) {
                    cout << "Error opening file.\n";
                    break;
                }
                vector<vector<int>> grid(9, vector<int>(9, 0));
                for (int i = 0; i < 9; ++i) {
                    for (int j = 0; j < 9; ++j) {
                        int value;
                        file >> value;
                        if (value < 0 || value > 9) {
                            cout << "Invalid input in file.\n";
                            return;
                        }
                        grid[i][j] = value;
                    }
                }
                file.close();
                PuzzleRecord record;
                record.grid = grid;
                record.timestamp = currentDateTime();
                record.solved = false;
                puzzleDatabase.push_back(record);
                saveDatabase();
                cout << "Puzzle loaded successfully!\n";
                break;
            }
            case 2:
                displayDatabase();
                break;
            case 3: {
                int index;
                cout << "Enter puzzle index to delete: ";
                cin >> index;
                if (index >= 0 && index < puzzleDatabase.size()) {
                    puzzleDatabase.erase(puzzleDatabase.begin() + index);
                    saveDatabase();
                    cout << "Puzzle deleted successfully!\n";
                } else {
                    cout << "Invalid index.\n";
                }
                break;
            }
            case 4: {
                int index;
                cout << "Enter puzzle index to update: ";
                cin >> index;
                if (index >= 0 && index < puzzleDatabase.size()) {
                    string filename;
                    cout << "Enter filename: ";
                    cin >> filename;
                    ifstream file(filename);
                    if (!file) {
                        cout << "Error opening file.\n";
                        break;
                    }
                    vector<vector<int>> grid(9, vector<int>(9, 0));
                    for (int i = 0; i < 9; ++i) {
                        for (int j = 0; j < 9; ++j) {
                            int value;
                            file >> value;
                            if (value < 0 || value > 9) {
                                cout << "Invalid input in file.\n";
                                return;
                            }
                            grid[i][j] = value;
                        }
                    }
                    file.close();
                    puzzleDatabase[index].grid = grid;
                    puzzleDatabase[index].timestamp = currentDateTime();
                    puzzleDatabase[index].solved = false;
                    saveDatabase();
                    cout << "Puzzle updated successfully!\n";
                } else {
                    cout << "Invalid index.\n";
                }
                break;
            }
            case 5: {
                string timestamp;
                cout << "Enter timestamp to search: ";
                cin.ignore();
                getline(cin, timestamp);
                searchPuzzleByTimestamp(timestamp);
                break;
            }
            case 6:
                sortDatabaseByTimestamp();
                break;
            case 7:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 7);
}

// Display loading animation
void displayLoadingAnimation() {
    string loading = "Loading";
    for (int i = 0; i < 3; ++i) {
        cout << loading << ".";
        this_thread::sleep_for(chrono::milliseconds(500));
        cout << ".";
        this_thread::sleep_for(chrono::milliseconds(500));
        cout << ".\r";
        this_thread::sleep_for(chrono::milliseconds(500));
        cout << "\r" << loading << "   ";
        this_thread::sleep_for(chrono::milliseconds(500));
    }
    cout << "\r" << loading << "   \n";
}

int main() {
    vector<vector<int>> grid(9, vector<int>(9, 0));
    int choice;
    displayWelcomeMessage();
    do {
        cout << "\nSudoku Solver Menu:\n";
        cout << "1. Input Puzzle\n";
        cout << "2. Display Puzzle\n";
        cout << "3. Solve Puzzle\n";
        cout << "4. Performance Report\n";
        cout << "5. Manage Puzzles\n";
        cout << "6. Display Guide\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        while (!(cin >> choice)) {
            clearInputStream();
            cout << "Invalid input. Please enter a number: ";
        }
        switch (choice) {
            case 1:
                inputPuzzle(grid);
                break;
            case 2:
                displayGrid(grid);
                break;
            case 3:
                if (validateGrid(grid)) {
                    optimizeSolver(grid);
                    errorHandling(grid);
                    displayGrid(grid);
                } else {
                    cout << "Invalid puzzle.\n";
                }
                break;
            case 4:
                performanceReport(grid);
                break;
            case 5:
                managePuzzles();
                break;
            case 6:
                displayGuide();
                break;
            case 7:
                cout << "Thank you for using Sudoku Solver!\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 7);
    return 0;
}